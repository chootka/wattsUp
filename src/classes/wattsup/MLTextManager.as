package wattsup{		/*	*	MLTextManager	*	Note: Multi-Language TextManager. 	*		*	@langversion ActionScript 3.0	*	@playerversion Flash 10.0	*	*	@author D. Dixon	*	@since  06.03.2011	*/		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.text.TextField;	import flash.text.StyleSheet;		import com.dixond.logging.Logger;		public class MLTextManager extends EventDispatcher{				private var _log:Logger;		// ref to the xml content 		private var _data:XML;		// array of all languages found in xml data		private var _languages:Array; 			// currently active language		private var _currentLanguage:String; 		// contains all styles used for formatting		private var _styleSheet:StyleSheet;		// not required, but will be used if specified, when no style is set for specific fields		private var _defaultStyleId:String;		// default string used to denote text in content XML strings to be replaced by specified value(s). Can be overridden when setting text.		private var _stringToBeReplaced:String = "##"; 		// set this to true via setUseEmbeddedFonts() after initializing the MLTextManager if you are using embedded fonts		private var _useEmbeddedFonts:Boolean = false;				// singleton instance		private static var _tm:MLTextManager;						// SHOULD WE PASS FONT FORMAT DATA AS PARAM??		// public function MLTextManager (aData:XML, aDefaultLanguage:String, aStyleSheet:StyleSheet, aDefaultStyleId:String=null) {		public function MLTextManager (aData:XML, aDefaultLanguage:String, aDefaultStyleId:String=null) {			_log = Logger.getLog();			_data = aData;			_languages = getLanguagesFromData(); 			_currentLanguage = aDefaultLanguage;			_defaultStyleId = aDefaultStyleId;			_styleSheet = new StyleSheet(); //aStyleSheet;						//_log.debug("MLTextManager()", "languages: " + _languages + " | currentLanguage: " + _currentLanguage);		}				/**		*   initialises the MLTextManager as a Singleton 		*/		public static function init(aData:XML, aDefaultLanguage:String, aDefaultStyleId:String=null) {			if (_tm == null) {				_tm = new MLTextManager (aData, aDefaultLanguage, aDefaultStyleId);	      }	      return _tm;  		}				/**		*	returns ref to the singleton _tm instance		*/		public static function getInstance():MLTextManager {	      return _tm;  	    }			public function changeLanguage(aLanguage:String) {			_currentLanguage = aLanguage;			// send the language_change event			var e:LanguageEvent = new LanguageEvent(LanguageEvent.LANGUAGE_CHANGE, aLanguage);			this.dispatchEvent(e);		}				public function getCurrentLanguage():String {			return _currentLanguage;		}				public function setUseEmbeddedFonts(aState:Boolean) {			_useEmbeddedFonts = aState;		}				public function setDefaultStyleId(aStr:String) {			_defaultStyleId = aStr;		}				public function setStringToBeReplaced(aStr:String) {			_stringToBeReplaced = aStr;		}				public function setStyleSheet(aStyleSheet:StyleSheet) {			// CAUTION: setting this property will overwrite the existing styleSheet. 			// Note: Can use addStyle() to add styles individually without calling this function first.			_styleSheet = aStyleSheet;		}						public function addStyle(aStyleId:String, aStyleObj:Object) {			// add CSS type styles to the current stylesheet. Do NOT need to call setStyleSheet() first. 			// E.g. for standard html styles: addStyle("p", {fontSize:"12", textAlign:"left"}),			// Or for custom styles: addStyle(".title", {fontFamily: "Sketch Rockwell", fontSize:"40", color:0xFAFAFA, textAlign:"center"});			_styleSheet.setStyle(aStyleId, aStyleObj);		}				// get specified string from XML data		public function setFieldContent(aField:MLTextField, aContentId:String, aStyleId:String=null, aReplacementItems:Array=null, aStringToBeReplaced:String=null) {			//_log.debug("MLTextManager.setFieldContent()", aField, aContentId, aStyleId);			if (aStringToBeReplaced == null) {				aStringToBeReplaced = _stringToBeReplaced;			}						var contentObj:Object = {};			// get text for each lang and add it to content obj			for each(var lang in _languages) {				var txt = getString(aContentId, lang);				//_log.debug("\ttxt=" + txt);								// do any replacements if specified				if (aReplacementItems != null) {					txt = replaceString(txt, aStringToBeReplaced, aReplacementItems);				} 				var formattedTxt = formatString(txt, aStyleId);				// _log.debug("\tformattedTxt=" + formattedTxt)				contentObj[lang] = formattedTxt;			}						// set up the field and add the text			aField.styleSheet = _styleSheet;			aField.embedFonts = _useEmbeddedFonts;			aField.setContent(contentObj);		}				// assigns the specified string directly. Does not use XML data. 		public function setFieldLiteral(aField:MLTextField, aString:String, aStyleId:String=null, aReplacementItems:Array=null, aStringToBeReplaced:String=null) {			//_log.debug("MLTextManager.setFieldLiteral()", aField, aString, aStyleId);			if (aStringToBeReplaced == null) {				aStringToBeReplaced = _stringToBeReplaced;			}						var contentObj:Object = {};			// get text for each lang and add it to content obj			for each(var lang in _languages) {				var txt = aString;								// do any replacements if specified				if (aReplacementItems != null) {					txt = replaceString(txt, aStringToBeReplaced, aReplacementItems);				} 				var formattedTxt = formatString(txt, aStyleId);				contentObj[lang] = formattedTxt;			}						// set up the field and add the text			aField.styleSheet = _styleSheet; 			aField.embedFonts = _useEmbeddedFonts;			aField.setContent(contentObj);		}					// returns the string contained in the specified id in the specified language		// 		// here is a sample of the xml format:		// <content> -- root node		// 	<language1>		// 		<strings>		// 			<string_name1><![CDATA[insert desired string here]]></string_name1>		// 			<string_name2><![CDATA[insert desired string here]]></string_name2>		// 		</strings>		// 	</language1>		// 	<language2>		// 		<strings>		// 			<string_name1><![CDATA[insert desired string here]]></string_name1>		// 			<string_name2><![CDATA[insert desired string here]]></string_name2>		// 		</strings>		// 	</language2>		// </content>		public function getString(aContentId:String, aLanguage:String) {			return _data[aLanguage].strings[aContentId];		}				// replaces a designated search string with the replacement string. 		// If multiple replaceItems are specified they will replace multiple occurances of the search string if found. Otherwise, only the first occurance of the searchStr is replaced.		// E.g. replaceString("You weight $$$ pounds and $$$ ounces.", "$$$", [120, 8]); 		// returns: "You weight 120 pounds and 8 ounces"		// currently the replace string is NOT case sensitive.		private function replaceString(str:String, searchStr:String, replacementItems:Array) {			var replacementItemCount:int = replacementItems.length;			var pattern:RegExp;			var flags:String = "si";			var i:int = -1;			while ( ++ i < replacementItemCount ) {				pattern = new RegExp(searchStr,flags);				str = str.replace(pattern,replacementItems[i]);			}			return str;		}				// applies formatting from stylesheet		function formatString(aStr:String, aStyleId:String = null) {			// use the default style if there is one. Not required to be one, tho.			if (aStyleId == "" || aStyleId == null) {				aStyleId = _defaultStyleId;			}			// wrap style tag if a style is specified			if (aStyleId != "" && aStyleId != null) {				var txt = "<span class='" + aStyleId + "'>" + aStr + "</span>";			}		 	return ("<p>" + txt + "</p>");		}				// returns all languages found in an array		private function getLanguagesFromData() {			var arr:Array = [];			//_log.debug("getLanguagesFromData()", _data.children().length());			var languageList:XMLList = _data.children();			var languageCount = _data.children().length();			// convert this to an array			for (var i = 0; i< languageCount; i++) {				var languageName = _data.children()[i].name();				arr.push(languageName);			}			return arr;		}			} //end class}//end package