package wattsup{		/*	*	MLTextField	*	TextField subclass that facilitates language swapping via the MLTextManager	*	*	@langversion ActionScript 3.0	*	@playerversion Flash 9.0	*	*	@author D. Dixon	*	@since  21.12.2008	*/		import com.dixond.logging.Logger;		import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;			public class MLTextField extends TextField {		private var _log:Logger;		private var _tm:MLTextManager;		private var _content:Object;		private var _currentLanguage:String;				public function MLTextField (aX:int=0, aY:int=0, aW:int=10, aH:int=10, aWrap:Boolean=true) {			super();			_log = Logger.getLog();			_tm = MLTextManager.getInstance();			_currentLanguage = _tm.getCurrentLanguage();						this.x = aX;			this.y = aY;			this.width = aW;			this.height = aH;			this.wordWrap = aWrap;			if (aWrap) {				this.multiline = true;			}						// listen for language change events			_tm.addEventListener(LanguageEvent.LANGUAGE_CHANGE, languageChangeHandler);		}				public function setBorder(aColor:Number=0) {			if (aColor < 0) {				this.border = false;			} else {				this.border = true;				this.borderColor = aColor;			}		}				// assign new new language and update content display		private function languageChangeHandler(aEvent:LanguageEvent) {			// _log.debug("MLTextField.languageChangeHandler()", aEvent.language, aEvent.target);			_currentLanguage = aEvent.language;			update();			//Later: may want to include a hack to adjust translated text that doesn't fit the orig field size		}				// called by MLTextManager. Assigns the styled content to this field in all available languages		public function setContent(aContentObj:Object) {			//_log.debug("MLTextField.setContent()", aContentObj, aContentObj[_currentLanguage]);			_content = aContentObj;			update();		}				// display the content in the current language		public function update() {			if ((_content != null) && (_content[_currentLanguage] != null)) {				this.htmlText = _content[_currentLanguage];			}		}				public function setText(s:String) {			this.htmlText = s;		}				public function setDisplayAsPassword(aState:Boolean, aMaxChars:uint = 0) {			this.displayAsPassword = aState;			if (aMaxChars > 0) {				this.maxChars = aMaxChars;			}		}				public function destroy() {			this.text = "";			_content = {};		}				// setting a border color for this field automatically sets the border prop to true		public function setBorderColor(aColor:Number) {			if (aColor < 0) {				this.border = false;			} else {				this.border = true;				this.borderColor = aColor;			}		}			} //end class}//end package