package com.dixond.ia{	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.dixond.ia.ConfigManager;	/**	*  AppConfig is a Singleton with static method shortcuts to give app-wide access to a single ConfigManager instance. 	*	* @langversion ActionScript 3	* @playerversion Flash 9.0.0	*	* @author D	* @since  12.07.2007	*/	public class AppConfig extends EventDispatcher {		/**		*	Singleton instance		*/		private static var _instance				/**		* the ConfigManager instance to manage		*/		private var _cm:ConfigManager;		/**		*			*/		public function AppConfig() {		} 				private function configCompleteHandler(aEvent:Event) {			trace("AppConfig.configCompleteHandler()", aEvent.target, aEvent);			dispatchEvent(new Event(Event.COMPLETE));			_instance._cm.removeEventListener(Event.COMPLETE, _instance.configCompleteHandler);			_instance._cm.removeEventListener(IOErrorEvent.IO_ERROR, _instance.configErrorHandler);		}		private function configErrorHandler(aEvent:IOErrorEvent) {			trace("AppConfig.loadErrorHandler()", aEvent.text);			// dispatch an error event if this doesn't load			dispatchEvent(aEvent);			_instance._cm.removeEventListener(Event.COMPLETE, _instance.configCompleteHandler);			_instance._cm.removeEventListener(IOErrorEvent.IO_ERROR, _instance.configErrorHandler);		}		// === Static Functions === //		/**		*			*/		public static function getInstance() {			if (_instance == null) {				_instance = new AppConfig();			}			return _instance;		}		/**		*	creates the singleton instance and loads config file via new ConfigManager instance		*/		public static function init (aFilePath:String="config.xml") {			if (_instance == null) {				AppConfig.getInstance();				trace("AppConfig.init()");				if (_instance._cm == null) {						try{						_instance._cm = new ConfigManager(aFilePath);						_instance._cm.addEventListener(Event.COMPLETE, _instance.configCompleteHandler);						_instance._cm.addEventListener(IOErrorEvent.IO_ERROR, _instance.configErrorHandler);					}catch (e:Error) {						trace ("Could not initialize AppConfig. " + e.message);					}				}			}			}		public static function getSetting(aSettingName) {			return _instance._cm.getSetting(aSettingName);		}				/**		*  Returns an array of values from all occurances of settingName config file. <br>		*  Useful for when there are many diff values using the same tag. e.g <language>		*   <p>Note all values are returned as XML objects that must be converted to desired type, tho often in case of Strings and numbers this seems to happen transparently via context.</p>		*	@return array of values from specified element		*/		public static function getSettingArray(aSettingName) {			return _instance._cm.getSettingArray(aSettingName)		}		public static function getSettingAttribute(aSettingName, aAttribute) {			return _instance._cm.getSettingAttribute(aSettingName, aAttribute);		}		/**		* returns the ConfigManager instance		*/		public static function get cm() {			return _instance._cm;		}		/**		* returns the ConfigManager's settings xml doc		*/		public static function get settings() {			return _instance._cm.settings;		}		public override function toString():String {			return "[object AppConfig]";		}		// end class	}	// end package}