/* ============ConfigManager ===== History =====7/05/07 - AS3 Upgrade7/10/07 - Non-singleton*/package com.dixond.ia{	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	/**	*   Loads configuration settings from external xml file	*	* @langversion ActionScript 3	* @playerversion Flash 9.0.0	*	* @author D	* @since  12.07.2007	* @internal This version is no longer a Singleton. Can instantiate normally<br>	* History <br>	* 7/05/07 - AS3 Upgrade<br>	* 7/10/07 - Non-singleton<br>	*/	public class ConfigManager extends EventDispatcher {		/**		* xml doc containing loaded settings		*/		private var _settingsXml:XML;		/**		* read settings data. The file path is optional. If not specified "settings.xml" will be used.		* @filePath file to load @default 'settings.xml'		*/		public function ConfigManager(aFilePath:String="settings.xml"):void {			readData(aFilePath);		}		/**		*   returns text node value of specified element.		*   <p>Note all values are returned as XML objects. So will need to convert to desired type, tho often in case of Strings and numbers this seems to happen transparently via context.</p>		*	<p>If more than one element with specified name exists, only first will be returned. To get all elements of the same name use <code>getSettingArray()</code></p>		*	@param aSettingName name of setting to retrieve. Each setting is an element in the xml file.		*	@return XML object representing value of specified <setting> element. 		*	@see #getSettingArray()		*/		public function getSetting(aSettingName):XML {			// note: whitespace is automatically trimmed from beg and end of text nodes! : )			var val:* = _settingsXml[aSettingName];			// NOTE: if the setting has siblings, val will be an XMLList. If this happens we return the first item in the XMLList			if (val is XMLList) {				return val[0];			} else {				return val;			}		}		public function getSettingAttribute(aSettingName:String, aAttribute:String) {			var val:* = _settingsXml[aSettingName][aAttribute];		}		/**		*  Returns an array of values from all occurances of settingName config file. <br>		*  Useful for when there are many diff values using the same tag. e.g <language>		*   <p>Note all values are returned as XML objects that must be converted to desired type, tho often in case of Strings and numbers this seems to happen transparently via context.</p>		*	@return array of values from specified element		*/		public function getSettingArray(aSettingName):Array {			var list:XMLList = _settingsXml[aSettingName];			var arr:Array = [];			for each (var item in list) {				arr.push(item);			}			return arr;		}		/**		* read text data from specified file		*/		private function readData(aFilePath:String):void {			trace("ConfigManager.readData()");			var request:URLRequest = new URLRequest(aFilePath);			var urlLoader:URLLoader = new URLLoader();			urlLoader.addEventListener(Event.COMPLETE, loadCompleteHandler);			urlLoader.addEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);			// catch any immediate errors			try {				urlLoader.load(request);			} catch (e:Error) {				//trace("ERROR: " + e);				throw new Error("Could not read config file." + e.message);			}		}		private function loadCompleteHandler(aEvent:Event):void {			// trace("ConfigManager.loadCompleteHandler()", aEvent.target, aEvent);			// extract xml data from loader			_settingsXml = new XML(aEvent.target.data);			dispatchEvent(new Event(Event.COMPLETE));		}		private function loadErrorHandler(aEvent:IOErrorEvent):void {			// trace("ConfigManager.loadErrorHandler()", aEvent.text);			// dispatch an error event if this doesn't load			dispatchEvent(aEvent);		}		/**		* returns whole xml doc		*/		public function get settings():XML {			return _settingsXml;		}		public override function toString():String {			return "[object ConfigManager]";		}		// end class	}	// end package}