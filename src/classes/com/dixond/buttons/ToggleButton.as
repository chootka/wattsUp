package com.dixond.buttons{	/**	ToggleButton	accepts DisplayObjects as the selected and deselected states.	Sends Event.CHANGE event when pressed. Determine the curent state via btnInstance.selected property.	Specify when intantiating, whether selection is triggered by MOUSE_UP or MOUSE_DOWN events.	*/	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;			public class ToggleButton extends TwoStateButton {		/**		* creates new ToggleButtonInstance		* @copy TwoStateButton#TwoStateButton()		*/		public function ToggleButton (aUpState:DisplayObject,aDownState:DisplayObject,aDisabledState:DisplayObject=null,aUseMouseUp:Boolean=false) {			super(aUpState,aDownState,aDisabledState,aUseMouseUp);		}				/**		* @inheritDoc		*/		protected override function mouseDownHandler(aEvent:MouseEvent):void {			if (_disabled || _useMouseUp) {				return;			}			toggleState();		}				/**		* @inheritDoc		*/		protected override function mouseUpHandler(aEvent:MouseEvent):void {			if (_disabled || !_useMouseUp) {				return;			}			toggleState();		}				/**		* toggles selection state		* triggers redraw of button and dispatching of event(s)		*/		protected function toggleState():void {			if (_selected) {				deselect();			} else {				select();			}		}				/**		* select this button and send the select event		* @see TwoStateButton#select		*/		public override function select():void {			super.select();			sendEvent();		}				/**		* deselect button and send event 		* @inheritDoc		*/		public override function deselect():void {			super.deselect();			sendEvent();		}		// sends ToggleEvent with type (or param) set based on current state		protected function sendEvent():void {			dispatchEvent( new Event(Event.CHANGE) );		}		/**		* manually triggers (simulates) a click on the button (note: this will include sending of any resulting events)		* select this button and send an event		* @inheritDoc		*/		// public override function trigger():void {		public function trigger():void {			toggleState();		}				// sets the state without triggering the event associated with selecting and deselecting.		public function selectWithoutEvent() {			super.select();		} 				// sets the state without triggering the event associated with selecting and deselecting.		public function deselectWithoutEvent() {			super.deselect();		}		// end class	}	// end package}