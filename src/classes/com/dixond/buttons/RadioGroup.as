package com.dixond.buttons{	/**	*	RadioGroup	* 	Class to control a group of graphic based TwoStateButton objects or its subclasses	*	Note: Can't disable buttons via the RadioGroup. Must disable them via the button's class 	*	Dispatches Event.CHANGE event when a new button is selected. 	*	You can get a ref to the selected button via RadioGroup.selection.	*/	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.MouseEvent;	public class RadioGroup extends EventDispatcher {		// the name of this RadioGroup		private var _name:String;		// array of all TwoStateButton objects associated with this group		private var _buttons:Array;		// currently selected button		private var _selection:TwoStateButton;		// event that triggers a click. Either MouseEvent.MOUSE_DOWN or MouseEvent.MOUSE_UP. 		// (MouseDown is useful for touchscreens.)		private var _triggeringEvent:String;				/**		* Creates new RadioGroup.		*/		public function RadioGroup(aName, aUseMouseUp:Boolean = false) {			_name = aName;			_buttons=[];			if (aUseMouseUp) {				_triggeringEvent = MouseEvent.MOUSE_UP;			} else {				_triggeringEvent = MouseEvent.MOUSE_DOWN;			}		}				/**		* registers a TwoStateButton with this group. 		* @param button a TwoStateButton instance		*/		public function addButton(aBtn:TwoStateButton):void {			_buttons.push(aBtn);			// aBtn.group = this;			aBtn.addEventListener(_triggeringEvent, clickHandler);		}				/**		* removes a TwoStateButton's association with this group. 		* @param button a TwoStateButton instance		*/		public function removeButton(aButton:TwoStateButton):void {			aButton.removeEventListener(_triggeringEvent, clickHandler);			// aButton.group = null;			// remove the button _buttons list			for (var i = 0; i < _buttons.length; i++) {				if (_buttons[i] == aButton) {					_buttons.splice(i, 1);				}			}		}				private function clickHandler(aEvent:MouseEvent):void {			// trace("RadioGroup.clickHandler", aEvent.target, aEvent.currentTarget);			var targ = aEvent.currentTarget as TwoStateButton;			select(targ);		}				private function select(aBtn:TwoStateButton, aTriggerEvent:Boolean = true):void {			// if the button is disabled or already selected, no need to do anything			if (!aBtn.disabled && !aBtn.selected) {				// deselect the other buttons				for each(var button:TwoStateButton in _buttons) {					button.deselect();				}				// select the clicked button				_selection = aBtn;				_selection.select();				if (aTriggerEvent) {					sendChangeEvent();				}			}		}						// sends Event.CHANGE event whenever the current selection is changed		private function sendChangeEvent():void {			dispatchEvent(new Event(Event.CHANGE));		}				/**		*	returns the index of specified button in this group		*	@param button TwoStateButton instance		*/		public function getIndex(aBtn:TwoStateButton):Number {			for (var i = 0; i < _buttons.length; i++) {				if (_buttons[i] == aBtn) {					var ind = i;					break;				}			}			return ind;		}				/**		*	returns reference to the button at specified index		*	@param index index of button in this group		*/		public function getButtonAt(aIndex:int):TwoStateButton {			return _buttons[aIndex];		}				/**		*	returns reference to button that contains the specified value		*	@param value value for which to return the associated button		*/		public function getButtonAtValue(aVal:Object):TwoStateButton {			for (var i = 0; i < _buttons.length; i++) {				if (_buttons[i].value == aVal) {					var btn = _buttons[i];					break;				}			}			return btn;		}				/**		*   returns the currently selected button		*/		public function get selection():TwoStateButton {			return _selection;		}				/**		*	the <code>value</code> property of selected button		*/		public function get selectedValue():Object {			return _selection.value;		}				/**		*	the name of this group instance		*/		public function get name():String {			return _name;		}				/**		*	@private		*	selects the specified button 		*	@param button a TwoStateButton instance		*/		public function set selection(aBtn:TwoStateButton):void {			// _selection = aBtn;			select(aBtn);		}				/**		*	selects the button at specified index		*	@param index index of the button to select		*/		public function set selectedIndex(aIndex:Number):void {			var btn = getButtonAt(aIndex);			select(btn);					}				/**		*	sets the name of this group instance		*	@private		*/		public function set name(aName:String):void {			_name = aName;		}				//--------------------------------------		//  alternate selection functions that allow you to decide whether event gets triggered		//--------------------------------------				/**		*	deselects all buttons. Useful to start group with none selected		*/		public function selectNone() {			for each(var button:TwoStateButton in _buttons) {				button.deselect();			}		}				/**		*	sets group's selection to specified button		*	@param button TwoStateButton instance		*	@param triggerEvent specifies whether a <code>CHANGE</code> event is triggered for this selection		*/		public function setSelection(aBtn:TwoStateButton, aTriggerEvent:Boolean = true):void {			select(aBtn, aTriggerEvent);		}				/**		*	sets group's selection to the button with specified value		*	@param value value associated with a button		*	@param triggerEvent specifies whether a <code>CHANGE</code> event is triggered for this selection		*/		public function setSelectedValue(aVal:Object, aTriggerEvent:Boolean = true):void {			var btn = getButtonAtValue(aVal);			select(btn, aTriggerEvent);		}				// 		/**		*	sets selection to button at specified index		*	@param index index of button in this group		*	@param triggerEvent specifies whether a <code>CHANGE</code> event is triggered for this selection		*/		public function setSelectedIndex(aIndex:int, aTriggerEvent:Boolean = true):void {			var btn = getButtonAt(aIndex);			select(btn, aTriggerEvent);		}		// end class	}	// end package}