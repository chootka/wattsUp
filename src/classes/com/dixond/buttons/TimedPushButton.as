package com.dixond.buttons{	/**	PushButton	Subclass of TwoStateButton that displays the selected state on MOUSE_DOWN and the deselected state after the specified delay (specified in milliseconds). 	Useful for touchscreen apps where buttons are often not held down long enuf to see the feedback on pressing.	Dispatches the MouseEvent.CLICK handler on MOUSE_DOWN event only.	*/	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;		// import com.dixond.display.TwoStateButton;		public class TimedPushButton extends TwoStateButton {		private var _timer:Timer;		private var _selecting:Boolean = false; // flag used to differentiate my CLICK event vs the default CLICK event				public function TimedPushButton (aUpState:DisplayObject, aDownState:DisplayObject, aDisabledState:DisplayObject=null, aDelay:Number=400) {			super(aUpState,aDownState,aDisabledState);			_timer = new Timer(aDelay, 1);			// add a listner to intercept the default CLICK event so it doesn't get passed on in addition to ours			this.addEventListener(MouseEvent.CLICK, clickHandler);		}				private function clickHandler(aEvent:MouseEvent) {			// capture the default CLICK event here so it doesn't get passed on in addition to our CLICK event.			// we'll know it's ours if the _selecting property is true.			if (!_selecting) {				aEvent.stopImmediatePropagation();				return;			} 			// shouldn't see this message if we're successfully blocking the default CLICK event.			// trace("TimedPushButton.clickHandler()", aEvent.target, aEvent.currentTarget, aEvent.eventPhase);		}				/**		* @inheritDoc		*/		protected override function mouseDownHandler(aEvent:MouseEvent):void {			if (_disabled) {				return;			}			select();		}				/**		* @inheritDoc		*/		protected override function mouseUpHandler(aEvent:MouseEvent):void {			if (_disabled) {				return;			}			// deselect();		}						/**		* select this button and send the select event		*/		public override function select():void {			super.select();			_selecting = true;			sendEvent();			_selecting = false;			_timer.addEventListener(TimerEvent.TIMER, timerHandler);			_timer.reset(); // make sure it starts from begining			_timer.start();		}				/**		* deselect button. Does not send an event on deselect.		*/		public override function deselect():void {			super.deselect();			_timer.stop();			_timer.removeEventListener(TimerEvent.TIMER, timerHandler);		}		public function timerHandler(aEvent:TimerEvent) {			deselect();		}			protected function sendEvent():void {			// note: will also dispatch the MouseEvent.MOUSE_DOWN event. 			// So you can listen for either that or the MouseEvent.CLICK			dispatchEvent( new MouseEvent(MouseEvent.CLICK) );		}		/**		* manually triggers (simulates) a click on the button (note: this will include sending of any resulting events)		* select this button and send an event		* @inheritDoc		*/		// public override function trigger():void {		public function trigger():void {			select();		}				// sets the state without triggering the event associated with selecting and deselecting.		public function selectWithoutEvent() {			super.select();		} 				// sets the state without triggering the event associated with selecting and deselecting.		public function deselectWithoutEvent() {			super.deselect();		}		// end class	}	// end package}