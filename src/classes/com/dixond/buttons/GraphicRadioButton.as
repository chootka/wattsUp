package com.dixond.buttons{	/** 	GraphicRadioButton	A graphic based RadioButton (as opposed to Flash's component RadioButtons).	Subclass of the TwoStateButton	Intended specifically to exist as part of a group of mutually exclusive buttons, in which only one can be selected. 	A state can be represented by any DisplayObject (e.g. Loader, Sprite, MovieClip...)). 	Add GraphicRadioButtons to a RadioGroup instance, which will control selection/deselection and dispatching of events. 	Clicking a GraphicRadioButton (if not already selected) will trigger RadioGroup to dispatch an Event.CHANGE event.	GraphicRadioButton will listen for Event.CHANGE from RadioGroup and Dispatch its own Event.CHANGE event. 	So you can listen for either the group or the button. 	Use the getter btnInstance.selected to get the current selected state. 	(Note the RadioGroup can also provide the current selected button via radioGroupInstance.selection  )	*/			// import com.dixond.display.TwoStateButton;	import com.dixond.display.RadioGroup;	import flash.display.DisplayObject;		import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.MouseEvent;	public class GraphicRadioButton extends TwoStateButton {		private var _group:RadioGroup;				/**		*	@param upState DisplayObject that represents the "up" or "off" state of button 		*	@param downState DisplayObject that represents the "down" or "on" state of button		*	@param disabledState DisplayObject that represents the "disabled" state of button		*	@param useMouseUp if true, button presses are triggered via MOUSE_UP event. Otherwise MOUSE_DOWN is used. Default is false.		*/		public function GraphicRadioButton(aUpState:DisplayObject,aDownState:DisplayObject,aDisabledState:DisplayObject=null,aUseMouseUp:Boolean=false) {			super(aUpState,aDownState,aDisabledState,aUseMouseUp);			// trace("GraphicRadioButton", aUpState, aDownState);		}						/**		*	returns the group that this button belongs to		*/		public function get group():RadioGroup {			return _group;		}				/**		*	assigns this button to specified group		*/		public function set group(aGroup:RadioGroup):void {			_group = aGroup;			if (_group == null) {				// stop listening for the RadioGroup's change event				_group.removeEventListener(Event.CHANGE, changeHandler);			} else {				// listen for the RadioGroup's changeEvent				_group.addEventListener(Event.CHANGE, changeHandler);			}		}				private function changeHandler(aEvent:Event) {			dispatchEvent(new Event(Event.CHANGE));		}				/**		*	returns the name of the group this button is assigned to		*/		public function get groupName():String {			return _group.name;		}				/**		*	set this button's _selected state to true, triggers it's graphic re-draw		*/		public override function select():void {			super.select();		} 				/**		*	set this button's _selected state to false, triggers it's graphic re-draw		*/		public override function deselect():void {			super.deselect();				}		// end class	}	// end package}