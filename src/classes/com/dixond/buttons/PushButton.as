package com.dixond.buttons{	/**	PushButton	Subclass of TwoStateButton that displays the selected state on MOUSE_DOWN and the deselected state on MOUSE_UP	This one dispatches the MouseEvent.CLICK handler	The MouseEventCLICK event can be triggered on either MOUSE_UP or MOUSE_DOWN event. Specify when instantiating.	*/	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	// import com.dixond.log.Logger;			public class PushButton extends TwoStateButton {		public function PushButton (aUpState:DisplayObject,aDownState:DisplayObject,aDisabledState:DisplayObject=null,aUseMouseUp:Boolean=false) {			super(aUpState,aDownState,aDisabledState, aUseMouseUp);		}				/**		* @inheritDoc		*/		protected override function mouseDownHandler(aEvent:MouseEvent):void {			if (_disabled) {				return;			}			select();		}				/**		* @inheritDoc		*/		protected override function mouseUpHandler(aEvent:MouseEvent):void {			if (_disabled) {				return;			}			deselect();		}						/**		* select this button and send the select event		* @see TwoStateButton#select		*/		public override function select():void {			super.select();			if (!_useMouseUp) {				sendEvent();			}		}				/**		* deselect button. Does not send an event on deselect.		*/		public override function deselect():void {			super.deselect();			if (_useMouseUp) {				sendEvent();			}		}		// sends ToggleEvent with type (or param) set based on current state		protected function sendEvent():void {			dispatchEvent( new MouseEvent(MouseEvent.CLICK) );		}		/**		* manually triggers (simulates) a click on the button (note: this will include sending of any resulting events)		* select this button and send an event		* @inheritDoc		*/		// public override function trigger():void {		public function trigger():void {			select();		}				// sets the state without triggering the event associated with selecting and deselecting.		public function selectWithoutEvent() {			super.select();		} 				// sets the state without triggering the event associated with selecting and deselecting.		public function deselectWithoutEvent() {			super.deselect();		}		// end class	}	// end package}