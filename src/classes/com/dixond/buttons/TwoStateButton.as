package com.dixond.buttons{	/**	This is intended to be a base class that can be subclassed. Provides the basic functionality of 	a two-state button, such as a toggle button or a radio button, or a push button. <br>	This class handles the state change and drawing of the states. <br>	NOTE: This class does not listen for MouseEvents	The particulars of event listening, what constitutes a selection, and event dispatching is up to the subclasses.	Alternatively, other classes (e.g. RadioGroup) can control selection by adding listeners to this button and calling select() and deselect() functions.		Note: has 2 required states: true (synonymous with selected or down) and false (not selected or up).	This button not include a rollover state. It does include an optional disabled state.		TwoStateButtons can also have an optional value associated with them via the public value property	*/	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;		public class TwoStateButton extends Sprite {		private var _stateContainer:Sprite; // sprite that contains all the button state DisplayObjects		protected var _upState:DisplayObject;		protected var _downState:DisplayObject;		protected var _disabledState:DisplayObject;		protected var _useMouseUp:Boolean;		protected var _selected:Boolean;		protected var _disabled:Boolean;				protected var _value:*; // optional value that can be associated with this button				/**		@param aUpState object displayed when button is in it's UP state (not selected)		@param aDownState object displayed when button is in it's DOWN state (selected)		@param aDisabledState object displayed when button is in it's disabled state (will not respond to mouse events)		@param aUseMouseUp if true mouseUp events trigger selection. If false mouseDown events trigger selection. Default is false.		*/		public function TwoStateButton (aUpState:DisplayObject,aDownState:DisplayObject,aDisabledState:DisplayObject=null,aUseMouseUp:Boolean=false) {			// trace ("TwoStateButton()", aUpState, aDownState);			this.buttonMode=true;			 // prevent children from intercepting the mouseEvents			 this.mouseChildren = false;			_stateContainer = new Sprite();			this.addChild(_stateContainer);						_upState=aUpState;			_downState=aDownState;			if (aDisabledState != null) {				_disabledState=aDisabledState;			}						_selected=false;			drawState();			enable();		}				/**		* draws (reveals/hides) button images according to state		*/		protected function drawState():void {			// trace("TwoStateButton.drawState()", _disabled, _selected);			// if it's disabled, handle disabled state first and skip the selection			if (_disabled) {				if (_disabledState != null) {					//trace("_disabledState = null");					if (_stateContainer.contains(_upState)){ 						_stateContainer.removeChild(_upState);					}					if (_stateContainer.contains(_downState)){ 						_stateContainer.removeChild(_downState);					}					_stateContainer.addChild(_disabledState);				}				return;			} else {				// hide the disabled state if we're no longer disabled				if (_disabledState != null) {					if (_stateContainer.contains(_disabledState)) {						_stateContainer.removeChild(_disabledState);					}				}			// FIXED THIS i hope!! I THINK THIS SELECTION PART WILL HAPPEN EVEN IF WE'RE DISABLED. SHOULD BE ELSE IF...			// if not handle selection				if (_selected) {					if (_stateContainer.contains(_upState)) {						_stateContainer.removeChild(_upState);					}					_stateContainer.addChild(_downState);				} else {					_stateContainer.addChild(_upState);					if (_stateContainer.contains(_downState)) {						_stateContainer.removeChild(_downState);					}				}			}		}				/**		*	response to mouse clicks is implemented by subclasses		*/ 		protected function mouseDownHandler(aEvent:MouseEvent):void {			// trace("TwoStateButton.mouseDownHandler()","target=" + aEvent.target,"currentTarget=" + aEvent.currentTarget,aEvent);			}				/**		*	response to mouse clicks is implemented by subclasses		*/ 		protected function mouseUpHandler(aEvent:MouseEvent):void {			// trace("TwoStateButton.mouseUpHandler()","target=" + aEvent.target,"currentTarget=" + aEvent.currentTarget,aEvent);			}				/**		* handle state change and graphical details of selecting this button. 		* additional actions should be implemented by subclass after calling this function via super.select().		*/		public function select():void {			// trace("TwoStateButton.select()");			_selected=true;			drawState();		}				/**		* handle state change and graphical details of deselecting this button		* additional actions should be implemented by subclass after calling this function via super.deselect().		*/		public function deselect():void {			_selected=false;			drawState();		}				/**		* displays disabled state image		* disabled state prevents button from receiving mouse events		*/		public function disable():void {			_disabled=true;			this.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.removeEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			drawState();		}		/**		* displays selected state prior to disabling		*  enables button to receive mouse events		*/		public function enable():void {			_disabled=false;			this.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.addEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);		}		/**		* set button state with or without dispatching event. 		* e.g. to have button state match the pre-existing state of something w/o triggering an event		*/		public function setState(aSelected:Boolean):void {			_selected=aSelected;			drawState();		}		// /**		// *  manually triggers (simulates) a click on the button, including event dispatches		// */		// public function trigger():void {		// 	// subclasses implement this		// }				/**		*	returns the value associated with this button		*/		public function get value():Object {			return _value;		}		//		/**		*	sets the value associated with this button		*/		public function set value(aVal):void {			_value = aVal;		}				/**		* clean up stray refs or content		*/		public function dispose():void {			this.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.removeEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			_stateContainer.removeChild(_upState);			_upState=null;			_stateContainer.removeChild(_downState);			_downState=null;			_stateContainer.removeChild(_disabledState);			_disabledState=null;		}				public function get disabled():Boolean {			return _disabled;		}				/**		*  gets whether this button is selected		*/		public function get selected():Boolean {			return _selected;		}				public function getUpState():DisplayObject {			return _upState;		}				public function getDownState():DisplayObject {			return _downState;		}				// end class	}	// end package}	