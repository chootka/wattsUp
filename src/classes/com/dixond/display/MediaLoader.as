package com.dixond.display{	import flash.display.DisplayObject;	import flash.system.LoaderContext;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.events.*;	/** 	* Display object to be used to load & display external images.<br/>	* can specify a filter and alpha value to be applied upon loading<br/>	* note: is not automatically added to display list	*		*	History:	*	3/6/08 - removed re-dispatching of events. Not necessary since we're subclassing Loader. Can just listen for loader events as normal.	*/	public class MediaLoader extends Loader {		//--------------------------------------		// PROTECTED VARIABLES		//--------------------------------------		// protected var _filters:Array;		// protected var _x:int;		// protected var _y:int;		//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------		/**		* creates new instance and automatically loads file if specified, and applies specified filters or alpha		*	any specified filters or alpha will be applied upon loading		*/		public function MediaLoader(aFilePath:String = "", aX:int=0, aY:int=0, aAlpha:Number=1, aFilters:Array=null, aContext:LoaderContext=null):void {			this.x = aX;			this.y = aY;			this.alpha = aAlpha;			this.filters = aFilters;			if (aFilePath != "" && aFilePath != null) {				this.loadFile(aFilePath, aContext);			}		}		/**		*   loads specified file.		*	any pre-existing content is automatically unloaded upon calling load().		*	any specified filters or alpha will be applied upon loading		*/		public function loadFile(aFilePath:String, aContext:LoaderContext=null):void {			// listen for loading and load error events			this.contentLoaderInfo.addEventListener(Event.INIT, initHandler);			this.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			var url:URLRequest = new URLRequest(aFilePath);			try {				// loader only throws security errors. All other errors are events.				load(url, aContext);			}catch (e:SecurityError) {				trace ("SECURITY ERROR: MediaLoader could not load image. " + e.message);			}		}		/**		* called when the content has completed loading.<br>		*/		protected function initHandler(e:Event):void {			// clean up the listenr now that we're done with it			this.contentLoaderInfo.removeEventListener(Event.INIT, initHandler);		}		/**		*	handles any errors with loading image		*/		protected function ioErrorHandler(e:IOErrorEvent):void {			// trace("ioErrorHandler() ", e, e.text);			trace("Error: MediaLoader could not load image. " + e.text + "\n");		}		/**		 * Nothing really to do here, i think...		 */		public function dispose():void {			// nothing needs to be done here, i think. Refs to this.content will be removed with this instance		}	}}